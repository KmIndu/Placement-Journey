https://www.youtube.com/watch?v=CZQGRp93K4k

1st Approach
Naive Approach
TLE will come
Time Complexity = O(N*K), Space Complexity = O(1), we are not considering output vector for space

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        for(int i = 0; i <= nums.size()-k; i++){
            int maxWindowValue = INT_MIN;
            for(int j = i; j < i+k; j++){
                maxWindowValue = max(maxWindowValue, nums[j]);
            }
            res.push_back(maxWindowValue);
        }
        return res;
    }
};

