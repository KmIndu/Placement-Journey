Video link: 
https://www.youtube.com/watch?v=nVG7eTiD2bY&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&index=33

Pdf link:
https://takeuforward.org/dynamic-programming/striver-dp-series-dynamic-programming-problems/

1. Recursion (Brute Force):

class Solution {
public:
    int solve(string& s, string& t, int i, int j)
    {
        if(j<0) return 1;
	    if(i<0) return 0;

	if(s[i] == t[j])
	{
            return solve(s, t, i-1, j-1) + solve(s, t, i-1, j);
	}

	return solve(s, t, i-1, j);
    }

    int numDistinct(string s, string t)
    {
        return solve(s, t, s.size()-1, t.size()-1);
    }
};

2. Recursion + Memoization:

class Solution {
public:
    int solve(string& s, string& t, vector<vector<int>>& dp, int i, int j)
    {
        if(j<0) return 1;
	if(i<0) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];

	if(s[i] == t[j])
	{
            return dp[i][j]= solve(s, t, dp, i-1, j-1) + solve(s, t, dp, i-1, j);
	}

	return dp[i][j]= solve(s, t, dp, i-1, j);
    }

    int numDistinct(string s, string t)
    {
        int m=s.size();
        int n=t.size();
        
        vector<vector<int>> dp(m+1, vector<int>(n+1, -1));
        return solve(s, t, dp, m-1, n-1);
    }
};

3. Tabulation:

class Solution {
public:
    int numDistinct(string s, string t) 
    {
	    int m = s.size(), n = t.size();
	    vector<vector<double>> dp(m+1, vector<double>(n+1, 0));

	    for(int i=0; i<=m; i++)
            dp[i][0] = 1;
     
	    for(int i=1; i<=m; i++)
	    {
		    for(int j=1; j<=n; j++)
		    {
			    if(s[i-1] == t[j-1])
				   dp[i][j] = dp[i-1][j] + dp[i-1][j-1];
			    else 
				   dp[i][j] = dp[i-1][j];
		    }
	    }
	    return (int)dp[m][n];
    }
};