This is a variation of rotten oranges problem.

Thie below link in discussion section was very helpful for solving this problem-
https://leetcode.com/problems/surrounded-regions/discuss/789539/Simplest-C%2B%2B-solution-possible-(with-comments)-Beats-99.5-solution

class Solution {
public:
    // Checks whether the indices are present at the border of the matrix.
    bool isBorder(int i, int j, int m, int n){
        return (i==0 || i==m-1 || j==0 || j==n-1);
    }
        
    void solve(vector<vector<char>>& board) {
        if(board.empty()) return;
        int m=board.size(), n=board[0].size();
        queue<pair<int, int>> q;
        // Finding the border elements as 'O' and converting it into something else.
	// This is done due to the reason because, they are not to be flipped in the final matrix.
	// We could check only the border rows and columns but I have instead traversed the whole matrix. 
        // You can surely save up some time here.
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(board[i][j]=='O' && isBorder(i,j,m,n))
                {
                    // Converting the 'O' into '.' so, that they can be later changed to 'O'.
                    board[i][j]='.';
                    q.push({i, j});
                }
            }   
        }
        
        // Array dx and dy contain the directions in which the checking is to be done.
        int dx[4] = {0, 0, 1, -1};
        int dy[4] = {1, -1, 0, 0};
        
        while(!q.empty()){
            int k = q.size(); 
            while(k--){
                int x = q.front().first, y = q.front().second;
                q.pop();
                // Checking all the directions.
                for(int i = 0; i < 4; ++i){
                    int nx = x + dx[i], ny = y + dy[i];
                    // To check whether the indices are present in the matrix. [Like (-1,0) is not present]
                    if(nx < 0 || ny < 0 || nx >= m || ny >= n || board[nx][ny] != 'O') continue;
                    board[nx][ny] = '.';
                    q.push({nx, ny});
                    
                }
            }
        }
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                // Just convert the remaining 'O' into 'X' as they are not connected to any border 'O'.
                if(board[i][j]=='O')
                    board[i][j] = 'X';
                // Now, convert the '.' into 'O' as they were connected to some border 'O'.
		else if(board[i][j]=='.')
                    board[i][j] = 'O';
    }
};