Sorting
Time Complexity: O (n (log n))
Space Complexity: Nothing really, but:

some sorting algorithms do take up space so be mindful of that.
it can be langauge dependent

class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.size()!=t.size()) return false;
        
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        
        return s==t;            
    }
};


Hashmap Approach
Time Complexity: O (n)
Space Complexity: O(n) (Some may argue it is O (1) because space will be constant, they are correct too.)

class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s==t) return true;
        if (s.size()!=t.size()) return false;
        unordered_map <char, int> umap;
        for (int i=0; i<s.size(); i++) {
            umap[s[i]]++;
            umap[t[i]]--;
        }
        for (auto it: umap) {
            if (it.second!=0) return false;
        }
        return true;
    }
};