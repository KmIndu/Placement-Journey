class Solution {
public:
    int firstoccurrence(vector<int> nums, int n, int x, int start, int end)
    {
         int result=-1;
         while(start<=end)
         {
            int mid=start+((end-start)/2);
            if(x==nums[mid])
            {
               result=mid;
               end=mid-1;
            }
            else if(x<nums[mid])
            {
               end=mid-1;
            }
            else if(x>nums[mid])
            {
                start=mid+1;
            }
          } 
         return result;
     }
    
    int lastoccurrence(vector<int> nums, int n, int x, int start, int end)
    {
         int result=-1;
         while(start<=end)
         {
            int mid=start+((end-start)/2);
            if(x==nums[mid])
            {
               result=mid;
               start=mid+1;
            }
            else if(x<nums[mid])
            {
               end=mid-1;
            }
            else if(x>nums[mid])
            {
                start=mid+1;
            }
          } 
         return result;
     }

    vector<int> searchRange(vector<int>& nums, int target)
    {
        int n=nums.size()-1;
        int start=0;
        int end=n;
        vector<int> v;
        int first=0, last=0;
    
        first = firstoccurrence(nums, n, target, start, end);
        last = lastoccurrence(nums, n, target, start, end);
    
        v.push_back(first);
        v.push_back(last);
        return v;        
    }
};