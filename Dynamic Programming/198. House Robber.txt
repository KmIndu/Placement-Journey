Video link-
https://www.youtube.com/watch?v=GrMBfJNk_NY&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&index=6

Notes link:
https://takeuforward.org/data-structure/maximum-sum-of-non-adjacent-elements-dp-5/

Memoization:

Time Complexity: O(N)
Reason: The overlapping subproblems will return the answer in constant time O(1). Therefore the total number of new subproblems we solve is ‘n’. Hence total time complexity is O(N).

Space Complexity: O(N)
Reason: We are using a recursion stack space(O(N)) and an array (again O(N)). Therefore total space complexity will be O(N) + O(N) ≈ O(N)

class Solution {
public:
    int helper(int ind, vector<int>& arr, vector<int>& dp)
    {
        if(ind==0) return arr[ind];
        if(ind<0)  return 0;
        
        if(dp[ind]!=-1) return dp[ind];
        
        int pick= arr[ind]+ helper(ind-2, arr,dp);
        int nonPick = 0 + helper(ind-1, arr, dp);
    
        return dp[ind]=max(pick, nonPick);
    }
    
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n, -1);
        
        return helper(n-1, nums, dp);
    }
};


Tabulation:

Time Complexity: O(N)
Reason: We are running a simple iterative loop

Space Complexity: O(N)
Reason: We are using an external array of size ‘n+1’.

class Solution {
public:
    int helper(int n, vector<int>& arr, vector<int>& dp)
    {
        dp[0]= arr[0];
        
        for(int i=1 ;i<n; i++){
             int pick = arr[i];
             if(i>1)
                 pick += dp[i-2];
             int nonPick = 0+ dp[i-1];
        
             dp[i]= max(pick, nonPick);
        }
        return dp[n-1];
    }
    
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n);
        
        return helper(n, nums, dp);
    }
};


Space Optimization:

Time Complexity: O(N)
Reason: We are running a simple iterative loop

Space Complexity: O(1)
Reason: We are not using any extra space.

class Solution {
public:
    int helper(int n, vector<int>& arr, vector<int>& dp)
    {
        int prev= arr[0];
        int prev2 =0;
        
        for(int i=1 ;i<n; i++){
             int pick = arr[i];
             if(i>1)
                 pick += prev2;
             int nonPick = 0+ prev;
        
             int cur_i = max(pick, nonPick);
             prev2 = prev;
             prev= cur_i;
        }
        return prev;
    }
    
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n);
        
        return helper(n, nums, dp);
    }
};