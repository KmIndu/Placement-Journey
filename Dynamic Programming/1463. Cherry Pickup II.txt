Striver Video Link-
https://www.youtube.com/watch?v=QGfn7JeXK54&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&index=14&ab_channel=takeUforward

Striver Notes Link-
https://takeuforward.org/data-structure/3-d-dp-ninja-and-his-friends-dp-13/


Recursive Solution-
Time Complexity: O(3^N*3^N) = exponential
Space Complexity: O(N) 

class Solution {
public:
    int func(int i, int j1, int j2, int m, int n, vector<vector<int>>& grid)
    {
        if(j1<0||j1>=n||j2<0||j2>=n)
            return -1e8;
            
        if(i==m-1)
        {
            if(j1==j2)
            {
                return grid[i][j1];
            }
            else
            {
                return grid[i][j1]+grid[i][j2];
            }            
        }
        
        int maxi=INT_MIN;
        for(int dj1=-1;dj1<=+1; dj1++)
        {
            for(int dj2=-1; dj2<=+1; dj2++)
            {
                int ans=0;
                if(j1==j2)
                {
                    ans=grid[i][j1];
                }
                else
                {
                    ans=grid[i][j1]+grid[i][j2];
                }
                ans+=func(i+1, j1+dj1, j2+dj2, m, n, grid);
                maxi=max(maxi, ans);
            }
        }
        return maxi;
    }
        
    int cherryPickup(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        return func(0, 0, n-1, m, n, grid);
    }
};

Memoization-

Time Complexity: O(N*M*M) * 9
Reason: At max, there will be N*M*M calls of recursion to solve a new problem and in every call, two nested loops together run for 9 times.

Space Complexity: O(N) + O(N*M*M)
Reason: We are using a recursion stack space: O(N), where N is the path length and an external DP Array of size ‘N*M*M’.

class Solution {
public:
    int func(int i, int j1, int j2, int m, int n, vector<vector<int>>& grid, vector<vector<vector<int>>>& dp)
    {
        if(j1<0||j1>=n||j2<0||j2>=n)
            return -1e8;
            
        if(i==m-1)
        {
            if(j1==j2)
            {
                return grid[i][j1];
            }
            else
            {
                return grid[i][j1]+grid[i][j2];
            }       
        }
        
        if(dp[i][j1][j2]!=-1)
            return dp[i][j1][j2];
        
        int maxi=INT_MIN;
        for(int dj1=-1;dj1<=+1; dj1++)
        {
            for(int dj2=-1; dj2<=+1; dj2++)
            {
                int ans=0;
                if(j1==j2)
                {
                    ans=grid[i][j1];
                }
                else
                {
                    ans=grid[i][j1]+grid[i][j2];
                }
                ans+=func(i+1, j1+dj1, j2+dj2, m, n, grid, dp);
                maxi=max(maxi, ans);
            }
        }
        return dp[i][j1][j2]=maxi;
    }
        
    int cherryPickup(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<vector<int>>> dp(m, vector<vector<int>>(n, vector<int>(n, -1)));
        return func(0, 0, n-1, m, n, grid, dp);
    }
};