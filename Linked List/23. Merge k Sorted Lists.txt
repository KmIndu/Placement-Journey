//1st Approach

class Solution {
private:
      ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL)
            return list2;
        if(list2==NULL)
            return list1;
        
        if(list1->val>list2->val)
             swap(list1, list2);
        
        ListNode* res=list1;
        
        while(list1!=NULL && list2!=NULL)
        {
            ListNode* temp=NULL;
            while(list1!=NULL && list1->val<=list2->val)
            {
                temp=list1;
                list1=list1->next;
            }
            temp->next=list2;
            swap(list1, list2);
        }    
        return res;
    }
    
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0) return NULL;
        if(lists.size() == 1) return lists[0];
        
        // traversing over the lists
        for(int itr = 1; itr < lists.size(); itr++){
            lists[0] = mergeTwoLists(lists[0], lists[itr]);
        }
        
        return lists[0];
    }
};


//2nd Approach
//Using Priority Queue(Min Heap)

//3rd Approach
//Using Divide & Conquer Strategy