47 / 51 test cases passed.

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>> adj[n];
        // create adjacency list
        for(int i=0;i<flights.size();i++){
            adj[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }
        
        // Dijkstra's algorithm begins from here
	    priority_queue<pair<pair<int,int>, int>,vector<pair<pair<int,int>, int>>, greater<pair<pair<int,int>, int>>> pq; // min-heap ; In pair => (dist,from, k)
	    vector<int> distTo(n,INT_MAX); 	// 1-indexed array for calculating shortest paths; 
	
	    distTo[src] = 0;
	    pq.push(make_pair(make_pair(0,src), k));	// (dist,from, k)
	
	    while( !pq.empty() ){
            int dist = pq.top().first.first;
		    int prev = pq.top().first.second;
            int l=pq.top().second;
		    pq.pop();
            
            if(prev==dst)
                return dist;
            if(k<0)
                continue;
        
		    for( auto& it: adj[prev]){
                int next = it.first;
                int nextDist = it.second;
                if( distTo[next] > distTo[prev] + nextDist && l<=k){
                    if( l > 0 || (next == dst && l == 0)){
                    distTo[next] = distTo[prev] + nextDist;
				    pq.push(make_pair(make_pair(distTo[next], next), l-1));
                    }
			    }
		   }	
	   }
       return -1;
    }
};