https://www.youtube.com/watch?v=M65xBewcqcI&ab_channel=takeUforward

Brute ForceApproach-

Time complexity= O(2(M * N) * (M+N))
Space Complexity= O(1)

Code-

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        for( int i = 0; i < matrix.size(); i++){
            for(int j = 0; j< matrix[0].size(); j++){
                if(matrix[i][j] == 0){
                    for(int k=0; k<matrix.size(); k++){
                        matrix[i][k]=-1;
                    }
                    for(int k=0; k<matrix[0].size(); k++){
                        matrix[k][j]=-1;
                    }
                } 
            }
        }
        for( int i = 0; i < matrix.size(); i++){
            for(int j = 0; j< matrix[0].size(); j++){
                if(matrix[i][j] == -1){
                    matrix[i][j]=0; 
                }
            }
        }        
    }
};


Better Approach-

Time complexity   = O(2(N*M))
Space Complexity: O(M + N)

Code-

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        int row[m];
        int col[n];
        
        for(int i=0;i<m;i++)
            row[i]=false;
        
        
        for(int i=0;i<n;i++)
            col[i]=false;
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(matrix[i][j]==0)
                {
                    row[i]=true;
                    col[j]=true;
                }
            }
         }
         for(int i=0;i<m;i++)
         {
            for(int j=0;j<n;j++)
            {
                if( row[i]==true  ||  col[j]==true)
                {
                    matrix[i][j]=0;
                }
            }
         }
    }
};


Optimal Approach-

Time complexity   = O(2(N*M)
Space Complexity: O(1)

Code-

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int col0 = 1, rows = matrix.size(), cols = matrix[0].size();
        for (int i = 0; i < rows; i++) {
            if (matrix[i][0] == 0) 
                col0 = 0;
            for (int j = 1; j < cols; j++)
                if (matrix[i][j] == 0)
                    matrix[i][0] = matrix[0][j] = 0;
        }
        for (int i = rows - 1; i >= 0; i--) {
            for (int j = cols - 1; j >= 1; j--)
                if (matrix[i][0] == 0 || matrix[0][j] == 0)
                    matrix[i][j] = 0;
            if (col0 == 0) matrix[i][0] = 0;
         }
    }
};