https://www.youtube.com/watch?v=UmJT3j26t1I&list=PLgUwDviBIf0q8Hkd7bK2Bpryj2xVJk8Vk&index=49

3 Methods

1. BRUTE [T(O(N*N))] [S(O(1))]

class Solution {
public: 
    TreeNode* insertNode(TreeNode* root,int key)
    {
        if(!root) return new TreeNode(key);
        if(key>root->val)   root->right=insertNode(root->right,key);
        else    root->left=insertNode(root->left,key);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode* root=new TreeNode(preorder[0]);
        for(int i=1;i<preorder.size();i++)
            insertNode(root,preorder[i]);
        return root;   
    }
};

2. BETTER [T(O(N*logN))] [S(O(N))] [using inorder-preorder to bt technique]

(Construct Binary Tree Using Preorder and Inorder Concept used.)

class Solution {
public:
    TreeNode* insertNodes(vector<int>& inorder, int inStart, int inEnd, vector<int>& preorder, int preStart, int preEnd, map<int,int>& inMap){
        if(preStart>preEnd || inStart>inEnd) return NULL;
        TreeNode* root= new TreeNode(preorder[preStart]);
        int inRoot=inMap[preorder[preStart]];
        int nodeInLeft=inRoot-inStart;
        root->left=insertNodes(inorder,inStart,inRoot-1,preorder,preStart+1,preStart+nodeInLeft,inMap);
        root->right=insertNodes(inorder,inRoot+1,inEnd,preorder,preStart+nodeInLeft+1,preEnd,inMap);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
       vector<int> inorder=preorder;
       sort(inorder.begin(),inorder.end());
       map<int,int>inMap;
       for(int i=0;i<preorder.size();i++)
            inMap[inorder[i]]=i;
       TreeNode* root=insertNodes(inorder,0,inorder.size()-1,preorder,0,preorder.size()-1,inMap);
       return root;
    }    
};

3. OPTIMAL [T(O(3N ~ N)) as we traverse one node at max 3 times to check] [S(O(1))]

(Validate Binary Search Tree Concept Used.)

class Solution {
public:
   TreeNode* buildTree(vector<int>preorder, int& index, int bound)
    {
        if(index==preorder.size() || preorder[index]>bound) return NULL;
        TreeNode* root=new TreeNode (preorder[index++]);
        root->left=buildTree(preorder,index,root->val);
        root->right=buildTree(preorder,index,bound);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {        
        int index=0;
        return buildTree(preorder,index,INT_MAX);
        
    }
};