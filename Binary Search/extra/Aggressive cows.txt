bool isPossible(vector<int> &stalls, int n, int k, int mid)
{
    int cows=1;               
    int lastCowPosition=stalls[0];
    for(int i=1;i<stalls.size();i++)
    {
        if(stalls[i]-lastCowPosition>=mid)
        {
            cows++;
            lastCowPosition=stalls[i];
            if(cows>=k) return true;
        }
    }
    return false;
}

int aggressiveCows(vector<int> &stalls, int k)
{
    int n=stalls.size();

    if(n<k)
    {
       return -1;
    }

    sort(stalls.begin(),stalls.end());
    
    long sum=0;
    for(int i=0; i<N; i++)
    {
            sum+=stalls[i];
    }
    int low=*max_element(stalls, stalls+n);
    int high=sum;              
    int result=-1;
    while(low<=high)
    {
        int mid=low+((high-low)/2);
        if(isPossible(stalls, n, k, mid)==true)
        {
            res=mid;
            low=mid+1;
        }
        else high=mid-1;
    }
    return result;
}