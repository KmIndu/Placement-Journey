The Basic idea behind this is that we can make a prefix sum array and a prefix sum array from last and
at whichever index the sum is equal then it is a middle position of the array having both sums from the
left and the right side equal. If we don't get any sum equal then we will return -1.

Taken help from this post-
https://leetcode.com/problems/find-the-middle-index-in-array/discuss/1444125/C%2B%2B-Cumulative-Sum-as-well-as-Prefix-Left-and-Right-Arrays-Approach-Diagrammatic-Explaination



class Solution {
public:
    int findMiddleIndex(vector<int>& nums) {
        int n = nums.size();
        vector<int> left(n,0);
        left[0] = nums[0];
        for(int i = 1;i<n;i++){
            left[i] = left[i-1] + nums[i];
        }
        vector<int> right(n,0);
        right[n-1] = nums[n-1];
        for(int i=n-2;i>=0;i--){
            right[i] = right[i+1] + nums[i];
        }
        for(int i = 0;i<n;i++){
            if(left[i] == right[i]) return i;
        }
        return -1;
    }
};