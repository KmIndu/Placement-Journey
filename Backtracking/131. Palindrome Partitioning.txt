striver bhaiya jindabad!!!
https://www.youtube.com/watch?v=WBgsABoClE0&ab_channel=takeUforward

Refer Notes-
https://takeuforward.org/data-structure/palindrome-partitioning/

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

                                                                                                              aabb

                                                                             a|abb                                                           aa|bb

                                                          a|a|bb                         a|ab|b                       aa|b|b                             aa|bb|
                                  
                                       a|a|b|b                       a|a|bb|                          aa|b|b|
            
                       a|a|b|b|




                                                                                                               f(s, index=0)
   Am I able to partition at  ....
    
                                                    f(string-index 0..0)                                                                       (string-index 0..1)                                (string-index 0..2)             (string-index 0..3)           index covered for palindrome

                                                    f(s, index 0 )                                                                                  f(s, index 1)                                          index 2                              index 3                              

         
 


class Solution {
public:
    void func(int index, string s, vector < string > & path, vector < vector < string > > & res) {
        if (index == s.size()) {
            res.push_back(path);
            return;
        }
        for (int i = index; i < s.size(); ++i) {
            if (isPalindrome(s, index, i)) {
                path.push_back(s.substr(index, i - index + 1));
                func(i + 1, s, path, res);
                path.pop_back();
            }
         }
    }

    bool isPalindrome(string s, int start, int end) {
       while (start <= end) {
           if (s[start++] != s[end--])
              return false;
       }
       return true;
    }
    vector<vector<string>> partition(string s) {
        vector < vector < string > > res;
        vector < string > path;
        func(0, s, path, res);
        return res;
    }
};