https://www.youtube.com/watch?v=MvUxldsaPR0&list=PLjeQ9Mb66hM113e4gWoWjG0kIQt_8MW-e&index=31

As the problem states we need to remove illegal car from either:
1. left [cost = 1]
2. right [cost = 1]
3. anywhere in between [cost = 2]

So, we will create two arrays which will store the cost from left-to-right[0...i] and right-to-left[i+1....n-1] traversal in two different pass.

For left-to-right array:
1. Initialise the cost of array to 0.
2. If s[0] == '1'means we can directly remove it from the left end which would be minimum cost = 1.
3.for (i = 1 to n - 1)// we have 2 choices
a. Either remove all the elements from left upto i which would cost = i + 1
b. Consider the previous cost + remove current element by cost = 2

	i.e left_to_right[i] = min(left_to_right[i - 1] + 2, i + 1)

Do similar thing for right-to-left array in reverse way

At the end, take the

1. ans = min of(left_to_right[n - 1], right_to_left[0])
2. for (i = 0 to n - 2)
   min of (ans, left_to_right[i] + right_to_left[i+1])
Example:

index          0  1  2  3  4  5  6
string         1  1  0  0  1  0  1
left_to_right  1  2  2  2  4  4  6
		 \  \  \  \  \  \
right_to_left  7  5  3  3  3  1  1

Code:

class Solution {
public:
    int minimumTime(string s) {
        int n = s.size();
        vector<int> left_to_right(n, 0);
        vector<int> right_to_left(n, 0);
        
        if(s[0] == '1')
            left_to_right[0] = 1;
        
        for(int i = 1; i < n; i++)
            if(s[i] == '1')
                left_to_right[i] = min(left_to_right[i - 1] + 2, i + 1);
            else
                left_to_right[i] = left_to_right[i - 1];
        
        if(s[n - 1] == '1')
            right_to_left[n - 1] = 1;
        
        for(int i = n - 2; i >= 0; i--)
            if(s[i] == '1')
                right_to_left[i] = min(right_to_left[i + 1] + 2, n - i);
            else
                right_to_left[i] = right_to_left[i + 1];
        
        int ans = INT_MIN;
        ans = min(right_to_left[0], left_to_right[n - 1]);
        
        for(int i = 0; i < n - 1; i++)
        {
            ans = min(ans, left_to_right[i] + right_to_left[i + 1]);
        }
        
        return ans;
    }
};