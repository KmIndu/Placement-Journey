https://www.youtube.com/watch?v=0tFmP1Eiilg&list=PLPyD8bF-abzswXItsbav88ojXrzurguY3&index=13

Time complexity:
Construction: O(N * logK)
Adding: O(logK)

Space Complexity: 
O(K) (can be reduced to O(1) by reusing memory of the existing array

class KthLargest {
public:
    priority_queue<int, vector<int>, greater<int>> pq; //min heap
    int size;
    KthLargest(int k, vector<int> nums) {
        size=k;
        for(int i=0;i<nums.size();i++) {
            pq.push(nums[i]);
            if(pq.size()>k) {
                pq.pop();
            }    
        }
    }
    
    int add(int val) {
        pq.push(val);
        if(pq.size()>size) {
            pq.pop();
        }    
        return pq.top();
    }
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */