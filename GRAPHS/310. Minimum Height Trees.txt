https://www.youtube.com/watch?v=g_DshK0nnmI

class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        queue<int> q;
        vector<int> degree(n, 0);
        vector<int> adj[n];
        
        // create adjacency list 
        for(int i = 0; i < edges.size(); i++){
                adj[edges[i][1]].push_back(edges[i][0]);
                adj[edges[i][0]].push_back(edges[i][1]);
        }
        // store the degree
        for(int i = 0; i < n; i++){
            for(auto it : adj[i]){
                degree[it]++;
            }
        }
        //first push the vertex with 1 degree 
        for(int i = 0; i < n; i++){
            if(degree[i] == 1){
                q.push(i);
            }
        }
        
        vector<int> ans;
        
        //bfs
	    while(!q.empty()) {
            int s = q.size();
            ans.clear();
            for(int i=0; i<s;i++) {
                int node = q.front(); 
	            q.pop(); 
	            ans.push_back(node);
	            for(auto it : adj[node]) {
                    degree[it]--;
	                if(degree[it] == 1) {
                        q.push(it); 
	                }
                }
            }
	    }
        
        if(n==1) ans.push_back(0); 
	    return ans;
	}
};