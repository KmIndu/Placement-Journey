KHUD SE KIYA HAI YRRRRRR...

class Solution {
public:
    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) {
        int ct = 0,cb = 0,cc = 0,i;
        map<int,int> m; // we create a map to store the count of each number appearing on the dice ( 1 to 6 )
		// by doing this we only serch for the number with max frequency as the req solution can be obtained from 
		// max frequency number only 
		
       // store freq
        for(i=0;i<tops.size();i++){
            m[tops[i]]++;
            m[bottoms[i]]++;
        }
        int max=0,res=-1;
        
     // find max freq in res variable
        for(auto i:m){
            if(max<i.second){
                res = i.first;
                max = i.second;
            }
        }
        
        for(i=0;i<tops.size();i++){
            if(tops[i] == res && bottoms[i] == res){
                cc++;                 // counter to count the common appearance of res in top and bottom vector
            }
            if(tops[i] == res){
                ct++;               //counter to count the  appearance of res in top vector
            }
            if(bottoms[i] == res){
                cb++;                  //counter to count the  appearance of res in bottom vector
            }
        }
              
        if(ct+cb-cc != tops.size()) return -1; // now if the total of both vectors - the common count doesnt come out 
                                                                             // to be the size of original vec then there is no solution and return -1
        
        res = min(cb,ct) - cc;                     // now find the min of both counts and substract it from common count to 
		                         // get the number of min no. of flips
        return res;
        
      
    }
};