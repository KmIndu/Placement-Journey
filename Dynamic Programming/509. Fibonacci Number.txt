https://www.youtube.com/watch?v=tyB0ztf0DNY&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&index=2

Solution - 1 (Recursion)

Time Complexity - O(2^N)
Space Complexity - O(1)

class Solution {
public:
	int fib(int N) {
		if(N < 2){
			return N;
		}
		return fib(N-1) + fib(N-2);
	}
};

If there are two recursive calls inside a function, the program will run the first call, finish its execution and then run the second call. Due to this reason, each and every call in the recursive tree will be executed. This gives the recursive code its exponential time complexity.
Can we improve on this? The answer is Yes!

Solution - 2 (Memoization)

Time Complexity: O(N)
Reason: The overlapping subproblems will return the answer in constant time O(1). Therefore the total number of new subproblems we solve is ‘n’. Hence total time complexity is O(N).

Space Complexity: O(N)
Reason: We are using a recursion stack space(O(N)) and an array (again O(N)). Therefore total space complexity will be O(N) + O(N) ≈ O(N)

class Solution {
public:
    
    int f(int n, vector<int> &dp)
    {
            if(n<=1)
                return n;
    
            if(dp[n]!= -1)
                return dp[n];
        
           return dp[n]= f(n-1,dp) + f(n-2,dp);
    }
    
    int fib(int n)
    {
        //int dp[n+1];
        //memset(dp, -1, sizeof(dp));
        vector<int>dp(n+1, -1);
        return f(n, dp);
    }
};


Solution - 3 (Tabulation)

Time Complexity: O(N)
Reason: We are running a simple iterative loop

Space Complexity: O(N)
Reason: We are using an external array of size ‘n+1’.

class Solution {
public:
    int f(int n, vector<int> &dp)
    {
        if(n <=1)
            return n;
        
        dp[0]= 0;
        dp[1]= 1;
  
        for(int i=2; i<=n; i++)
        {
            dp[i] = dp[i-1]+ dp[i-2];
        }
        return dp[n];
    }
    
    int fib(int n)
    {
        vector<int>dp(n+1, -1);
        return f(n, dp);
    }
};

Space Optimization -

Time Complexity: O(N)
Reason: We are running a simple iterative loop

Space Complexity: O(1)
Reason: We are not using any extra space

class Solution {
public:
    int fib(int n)
    {
        if(n <=1)
            return n;
        
        int prev2 = 0;
        int prev = 1;
        
        for(int i=2; i<=n; i++)
        {
            int cur_i = prev2+ prev;
            prev2 = prev;
            prev= cur_i;
        }
        return prev;
    }
};