class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target)
    {
        if(matrix.size()==0)
            return false;
        
        int m=matrix.size();
        int n=matrix[0].size();
        
        int low=0;
        int high=(m*n)-1;
        
        while(low<=high)
        {
            int mid=(low+(high-low)/2);
            if(target==matrix[mid/n][mid%n])
            {
                return true;
            }
            else if(target>matrix[mid/n][mid%n])
            {
                low=mid+1;
            }
             else if(target<matrix[mid/n][mid%n])
            {
                high=mid-1;
            }
        }
        return false;    
    }
};

/*GFG OPTIMAL APPROACH AND LEETCODE BETTER APPROACH NOT OPTIMAL
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target)
    {
        int m=matrix.size();
        int n=matrix[0].size();
        int i=0;
        int j=m-1;
        
        while(i>=0 && i<m && j>=0 && j<n)
        {
            if(target==matrix[i][j])
                return true;
            else if(target<matrix[i][j])
            {
                j--;
            }
            else if(target>matrix[i][j])
            {
                i++;
            }
        }
        return false;
    }
};*/