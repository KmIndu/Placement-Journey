class Solution {
public:
    int t[201][201];
    int solve(int m,int n,vector<vector<int>>& grid){
        if(m==0&&n==0) //Checking Base case
            return grid[m][n];
        if(m<0||n<0) 
            return INT_MAX/2; //divided by 2 since when adding INT_MAX range exceeding
        if(t[m][n]!=-1)
           return t[m][n];
           int left=grid[m][n]+solve(m,n-1,grid); //When moving left from bottom
           int right=grid[m][n]+solve(m-1,n,grid); //when moving up from bottom
           return t[m][n]=min(left,right);//storing and returning the min value path 
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        memset(t,-1,sizeof(t));
        return solve(grid.size()-1,grid[0].size()-1,grid);
    }
};

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {       
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> t(m, vector<int>(n, 0));
        t[0][0] = grid[0][0];
        
        if(m==0)
            return 0;
        
        // for 1st column
        for(int i=1 ; i<m ; i++)
        {
             t[i][0] = t[i-1][0] + grid[i][0];
        }
        // for 1st row
        for(int j=1; j<n; j++)
        {
            t[0][j] = t[0][j - 1] + grid[0][j];
        }
        // for rest of the 2d matrix
        for(int i=1; i<m; i++)
        {
            for(int j=1; j<n; j++)
            {
                t[i][j]=grid[i][j]+min(t[i-1][j], t[i][j-1]);
            }
        }
        return t[m-1][n-1];
    }
};